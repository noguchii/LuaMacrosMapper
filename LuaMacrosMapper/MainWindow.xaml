<Window x:Class="LuaMacrosMapper.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:LuaMacrosMapper"
        xmlns:bh="http://schemas.microsoft.com/xaml/behaviors"
        xmlns:b="clr-namespace:LuaMacrosMapper.Behaviors"
        xmlns:vm="clr-namespace:LuaMacrosMapper.ViewModels"
        xmlns:cm="clr-namespace:System.ComponentModel;assembly=WindowsBase"
        xmlns:sys="clr-namespace:System;assembly=System.Runtime.Extensions"
        mc:Ignorable="d" 
        Title="LuaMacros Mapper" Height="750" Width="1000" MinWidth="600" MinHeight="400">
    <Window.DataContext>
        <vm:MainWindowViewModel />
    </Window.DataContext>
    <bh:Interaction.Behaviors>
        <b:RawInputBehavior KeyDown="{Binding RawKeyDownCommand}" KeyUp="{Binding RawKeyUpCommand}" />
    </bh:Interaction.Behaviors>
    <bh:Interaction.Triggers>
        <bh:EventTrigger EventName="Loaded">
            <bh:InvokeCommandAction Command="{Binding LoadedWindowCommand}" />
        </bh:EventTrigger>
    </bh:Interaction.Triggers>
    <Window.Resources>
        <b:BoolToVisibilityConverter x:Key="ToVisibilityConverter" />
    </Window.Resources>
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="240" MinWidth="240" MaxWidth="400" />
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="*" />
            <RowDefinition Height="20" />
        </Grid.RowDefinitions>

        <!-- Left Column -->
        <DockPanel Margin="5,5,0,5">
            <!-- Buttons -->
            <WrapPanel DockPanel.Dock="Bottom" Orientation="Horizontal" HorizontalAlignment="Center" Margin="0,5,0,0">
                <Button Command="{Binding NewMappingCommand}" Content="New" Width="80" MaxWidth="100" Padding="10,5" />
                <Button Command="{Binding DeleteMappingCommand}" Content="Delete" Width="80" MaxWidth="100" Padding="10,5" Margin="5,0,0,0" />
            </WrapPanel>
            
            <!-- Mapping List -->
            <ListView ItemsSource="{Binding Mappings}" SelectionMode="Single" SelectedItem="{Binding SelectedMapping.Value, Mode=TwoWay}" d:ItemsSource="{d:SampleData ItemCount=5}">
                <ItemsControl.ItemTemplate>
                    <ItemContainerTemplate>
                        <ContentControl HorizontalContentAlignment="Stretch">
                            <bh:Interaction.Triggers>
                                <bh:EventTrigger EventName="MouseDoubleClick">
                                    <bh:InvokeCommandAction Command="{Binding DoubleClickCommand}" />
                                </bh:EventTrigger>
                            </bh:Interaction.Triggers>
                            <DockPanel x:Name="Row" HorizontalAlignment="Stretch">
                                <TextBlock x:Name="Name" Text="{Binding Name.Value}"  MinWidth="190">
                                </TextBlock>
                                <TextBox x:Name="EditName" Text="{Binding Name.Value, Mode=TwoWay, UpdateSourceTrigger=LostFocus}"
                                         MinWidth="190" MaxWidth="250"
                                         HorizontalContentAlignment="Stretch" BorderThickness="0"
                                         HorizontalAlignment="Stretch">
                                    <bh:Interaction.Triggers>
                                        <bh:EventTrigger EventName="LostFocus">
                                            <bh:InvokeCommandAction Command="{Binding LostFocusCommand}" />
                                        </bh:EventTrigger>
                                    </bh:Interaction.Triggers>
                                </TextBox>
                            </DockPanel>
                        </ContentControl>
                        <ItemContainerTemplate.Triggers>
                            <DataTrigger Binding="{Binding IsEditingName.Value}" Value="True">
                                <Setter TargetName="Name" Property="Visibility" Value="Collapsed" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding IsEditingName.Value}" Value="False">
                                <Setter TargetName="EditName" Property="Visibility" Value="Collapsed" />
                            </DataTrigger>
                        </ItemContainerTemplate.Triggers>
                    </ItemContainerTemplate>
                </ItemsControl.ItemTemplate>
            </ListView>
        </DockPanel>
        
        <!-- Right Column -->
        <DockPanel Grid.Column="1" Margin="5">
            <DockPanel.Resources>
                <CollectionViewSource x:Key="KeyMapsSource" Source="{Binding SelectedMapping.Value.KeyMaps}">
                    <CollectionViewSource.GroupDescriptions>
                        <PropertyGroupDescription PropertyName="VirtualKey.Value.Device.Value"/>
                    </CollectionViewSource.GroupDescriptions>
                    <CollectionViewSource.SortDescriptions>
                        <cm:SortDescription PropertyName="VirtualKey.Value.Key.Value" />
                    </CollectionViewSource.SortDescriptions>
                </CollectionViewSource>
                <Style x:Key="SpecialKeysMenuItemStyle" TargetType="MenuItem">
                    <Setter Property="Header" Value="{Binding Header}" />
                    <Setter Property="Command" Value="{Binding DataContext.SetSpecialKeyCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ContextMenu}}}" />
                    <Setter Property="CommandParameter" Value="{Binding}" />
                    <Setter Property="ItemsSource" Value="{Binding Items}" />
                </Style>
            </DockPanel.Resources>

            <!-- Captured Key -->
            <StackPanel Margin="0,0,0,5" DockPanel.Dock="Top" Orientation="Horizontal" HorizontalAlignment="Right">
                <TextBlock TextAlignment="Center" VerticalAlignment="Center" Padding="10,0">
                    <TextBlock Text="Key :" Padding="5" />
                    <TextBlock MinWidth="120" MaxHeight="160" Padding="10, 5"  Background="AliceBlue"
                               Text="{Binding CapturedKey.Value.Name.Value, Mode=OneWay}" />
                    <TextBlock Text="Code :"  Padding="5" />
                    <TextBlock Text="{Binding CapturedKey.Value.Key.Value}" MinWidth="40" MaxWidth="60" Padding="10, 5" Background="AliceBlue" />
                    <TextBlock Text="Flags :"  Padding="5" />
                    <TextBlock Text="{Binding CapturedKey.Value.Flags.Value}" MinWidth="30" MaxWidth="30" Padding="10, 5" Background="AliceBlue">
                        <bh:Interaction.Triggers>
                            <bh:EventTrigger EventName="MouseLeftButtonDown">
                                <bh:InvokeCommandAction Command="{Binding ToggleCapturedFlagCommand}" />
                            </bh:EventTrigger>
                        </bh:Interaction.Triggers>
                    </TextBlock>
                    <TextBlock Text="Device :" Padding="5" />
                    <TextBlock Text="{Binding CapturedKey.Value.Device.Value}" MinWidth="90" Padding="10, 5" Background="AliceBlue" ToolTip="LB: Copy / RB: Unset">
                        <bh:Interaction.Triggers>
                            <bh:EventTrigger EventName="MouseLeftButtonDown">
                                <bh:InvokeCommandAction Command="{Binding CopyCapturedDeviceCommand}" />
                            </bh:EventTrigger>
                            <bh:EventTrigger EventName="MouseRightButtonDown">
                                <bh:InvokeCommandAction Command="{Binding UnsetCapturedDeviceCommand}" />
                            </bh:EventTrigger>
                        </bh:Interaction.Triggers>
                    </TextBlock>
                </TextBlock>
                <Button IsEnabled="{Binding IsMappingSelected.Value}" ContextMenuService.IsEnabled="False" x:Name="SpecialKeyButton" Content="+" Padding="3,0">
                    <bh:Interaction.Triggers>
                        <bh:EventTrigger EventName="Click">
                            <bh:ChangePropertyAction TargetName="SpecialKeysContextMenu" PropertyName="PlacementTarget" Value="{Binding ElementName=SpecialKeyButton}" />
                            <!-- need to set DataContext -->
                            <bh:ChangePropertyAction TargetName="SpecialKeysContextMenu" PropertyName="IsOpen" Value="True" />
                        </bh:EventTrigger>
                    </bh:Interaction.Triggers>
                    <Button.ContextMenu>
                        <ContextMenu x:Name="SpecialKeysContextMenu" Placement="Bottom" 
                                     ItemsSource="{Binding SpecialKeyMenuItems}" 
                                     ItemContainerStyle="{StaticResource SpecialKeysMenuItemStyle}" />
                    </Button.ContextMenu>
                </Button>
                <Button Content="Add" Command="{Binding AddKeyMapCommand}" MinWidth="80" Padding="10,5" />
             </StackPanel>
            
            <!-- Mapping Options -->
            <StackPanel Orientation="Horizontal" DockPanel.Dock="Bottom" HorizontalAlignment="Right">
                <CheckBox Content="Minimize on run" Padding="10,5" VerticalAlignment="Center" VerticalContentAlignment="Center"
                          IsEnabled="{Binding IsMappingSelected.Value}"
                          ToolTip="LuaMacros will minimaize and go to TaskTray after run" IsChecked="{Binding SelectedMapping.Value.IsMinimaizeOnRun.Value}" />
                <Button Content="Generate" Command="{Binding GenerateCommand}" Padding="10,5" MinWidth="150" />
            </StackPanel>

            <!-- Mapping -->
            <ListView x:Name="Mapping" ItemsSource="{Binding Source={StaticResource KeyMapsSource}}" SelectionMode="Extended" Margin="0,0,0,5"
                      VirtualizingPanel.IsVirtualizingWhenGrouping="True" d:ItemsSource="{d:SampleData ItemCount=5}" >
                <ListView.Resources>
                    <Style x:Key="ToggleButton" TargetType="ToggleButton">
                        <Setter Property="Width" Value="48" />
                        <Setter Property="MinWidth" Value="48" />
                        <Setter Property="Padding" Value="6,3" />
                        <Setter Property="Margin" Value="5,0,0,0" />
                        <Setter Property="Foreground" Value="Gray" />
                        <Setter Property="BorderBrush" Value="LightGray" />
                        <Setter Property="Background" Value="White" />
                        <Style.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="BorderBrush" Value="#70c0e7" />
                                <Setter Property="Background" Value="#e5f3fb" />
                            </Trigger>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter Property="Foreground" Value="Black" />
                                <Setter Property="BorderBrush" Value="#26a0da" />
                                <Setter Property="Background" Value="#cbe8f6" />
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                    <!-- KeyMacro -->
                    <DataTemplate DataType="{x:Type vm:InputMacro}">
                        <StackPanel Orientation="Horizontal" Margin="0,5,0,0">
                            <TextBlock Text="Input Key :" VerticalAlignment="Center" Width="100" />
                            <Button Background="White" Width="100"  Padding="10 3" Margin="6,0,0,0" Content="{Binding VirtualKey.Value.Name.Value}" BorderBrush="LightGray" Command="{Binding SetKeyCommand}">
                                <bh:Interaction.Triggers>
                                    <bh:EventTrigger EventName="MouseLeftButtonDown">
                                        <bh:InvokeCommandAction Command="{Binding SetKeyCommand}" />
                                    </bh:EventTrigger>
                                </bh:Interaction.Triggers>
                            </Button>
                            <ToggleButton Content="LShift" IsChecked="{Binding WithShift.Value}" Style="{StaticResource ToggleButton}" />
                            <ToggleButton Content="Ctrl" IsChecked="{Binding WithCtrl.Value}" Style="{StaticResource ToggleButton}" />
                            <ToggleButton Content="LAlt" IsChecked="{Binding WithAlt.Value}" Style="{StaticResource ToggleButton}" />
                            <ToggleButton Content="LWin" IsChecked="{Binding WithWin.Value}" Style="{StaticResource ToggleButton}" />
                            <ToggleButton Content="RShift" IsChecked="{Binding WithRShift.Value}" Style="{StaticResource ToggleButton}" />
                            <ToggleButton Content="RCtrl" IsChecked="{Binding WithRCtrl.Value}" Style="{StaticResource ToggleButton}" />
                            <ToggleButton Content="RAlt" IsChecked="{Binding WithRAlt.Value}"  Style="{StaticResource ToggleButton}" />
                            <ToggleButton Content="RWin" IsChecked="{Binding WithRWin.Value}"  Style="{StaticResource ToggleButton}" />
                        </StackPanel>
                    </DataTemplate>
                    <!-- CommandMacro -->
                    <DataTemplate DataType="{x:Type vm:CommandMacro}">
                        <StackPanel Orientation="Horizontal" Margin="0,5,0,0">
                            <TextBlock Text="Command :" Width="100" VerticalAlignment="Center" />
                            <Button Content="{Binding SelectAppButtonText.Value}" Command="{Binding SelectAppCommand}" Width="100" Padding="10,3" Margin="6,0,0,0"
                                    ToolTip="{Binding Application.Value}">
                            </Button>
                            <Grid>
                                <TextBox Text="{Binding Arguments.Value, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Padding="6,3" Margin="6,0,0,0" Width="418" />
                                <TextBlock Text="Arguments" Foreground="Gray" Padding="6,3" Margin="6,0,0,0" 
                                           Visibility="{Binding IsVisiblePlaceHolder.Value, Converter={StaticResource ToVisibilityConverter}, Mode=OneWay}" IsHitTestVisible="False" />
                            </Grid>
                        </StackPanel>
                    </DataTemplate>
                    <!-- CodeMacro -->
                    <DataTemplate DataType="{x:Type vm:CodeMacro}">
                        <StackPanel Orientation="Horizontal" Margin="0,5,0,0">
                            <TextBlock Text="Code :" Width="100" VerticalAlignment="Center" />
                            <TextBox Text="{Binding Code.Value, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
                                     Padding="6,3" Margin="6,0,0,0" Width="524" MinLines="1" MaxLines="8" FontSize="14" FontFamily="Consolas" AcceptsReturn="True">
                            </TextBox>
                        </StackPanel>
                    </DataTemplate>
                </ListView.Resources>
                
                <!-- Grouping -->
                <ListView.GroupStyle>
                    <GroupStyle>
                        <GroupStyle.ContainerStyle>
                            <Style TargetType="{x:Type GroupItem}">
                                <Setter Property="Visibility" Value="Visible" />
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="{x:Type GroupItem}">
                                            <Expander IsExpanded="True" HorizontalContentAlignment="Stretch">
                                                <Expander.Template>
                                                    <ControlTemplate TargetType="{x:Type Expander}">
                                                        <StackPanel Orientation="Vertical">
                                                            <ToggleButton x:Name="Toggle" OverridesDefaultStyle="True"
                                                                          IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                                                                <ToggleButton.Template>
                                                                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                                        <Border Background="#cef1cd" x:Name="Container" IsHitTestVisible="True">
                                                                            <ContentPresenter />
                                                                        </Border>
                                                                        <ControlTemplate.Triggers>
                                                                            <Trigger Property="IsMouseOver" Value="True">
                                                                                <Setter TargetName="Container" Property="Background" Value="#bdf1bb" />
                                                                            </Trigger>
                                                                        </ControlTemplate.Triggers>
                                                                    </ControlTemplate>
                                                                </ToggleButton.Template>
                                                                <ContentPresenter x:Name="HeaderContent" ContentSource="Header" />
                                                            </ToggleButton>
                                                            <ContentPresenter x:Name="ExpanderContent" Visibility="Collapsed" />
                                                        </StackPanel>
                                                        <ControlTemplate.Triggers>
                                                            <Trigger Property="IsExpanded" Value="True">
                                                                <Setter Property="Visibility" Value="Visible" TargetName="ExpanderContent" />
                                                            </Trigger>
                                                        </ControlTemplate.Triggers>
                                                    </ControlTemplate>
                                                </Expander.Template>
                                                <Expander.Header>
                                                    <Border Padding="10,5" TextBlock.FontSize="14">
                                                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Stretch">
                                                            <TextBlock Text="Device :  " />
                                                            <TextBlock Text="{Binding Name}" />
                                                            <TextBlock Text="{Binding ItemCount, StringFormat={}  ({0})}" />
                                                        </StackPanel>
                                                    </Border>
                                                </Expander.Header>
                                                <ItemsPresenter />
                                            </Expander>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </GroupStyle.ContainerStyle>
                    </GroupStyle>
                </ListView.GroupStyle>
                
                <!-- KeyMap ItemContainer -->
                <ListView.ItemContainerStyle>
                    <Style TargetType="ListViewItem">
                        <Setter Property="IsSelected" Value="{Binding IsSelected.Value}" />
                        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="ListBoxItem">
                                    <ContentControl Background="Transparent">
                                        <StackPanel Background="Transparent">
                                            <!-- Row -->
                                            <ContentControl Tag="{Binding DataContext, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}}}"><!-- -->
                                                <bh:Interaction.Triggers>
                                                    <bh:EventTrigger EventName="MouseDoubleClick">
                                                        <bh:InvokeCommandAction Command="{Binding ToggleEditCommand}" CommandParameter="{Binding}" />
                                                    </bh:EventTrigger>
                                                </bh:Interaction.Triggers>
                                                <Border x:Name="Border" Padding="0,4" SnapsToDevicePixels="true"
                                                        Background="{TemplateBinding Background}"
                                                        BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                                                    <GridViewRowPresenter VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                                                </Border>
                                                <ContentControl.ContextMenu>
                                                    <ContextMenu>
                                                        <MenuItem Header="To Active" Command="{Binding PlacementTarget.Tag.SelectedMapping.Value.ToActiveCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ContextMenu}}}"  />
                                                        <MenuItem Header="To Inactive" Command="{Binding PlacementTarget.Tag.SelectedMapping.Value.ToInactiveCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ContextMenu}}}" />
                                                        <MenuItem Header="Remove" Command="{Binding PlacementTarget.Tag.SelectedMapping.Value.RemoveKeyMapCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ContextMenu}}}" />
                                                    </ContextMenu>
                                                </ContentControl.ContextMenu>
                                            </ContentControl>
                                            <!-- Row Extended -->
                                            <StackPanel Background="GhostWhite" ContextMenuService.IsEnabled="False" Orientation="Vertical"
                                                Visibility="{Binding IsEditing.Value, Converter={StaticResource ToVisibilityConverter}}">
                                                <!-- Modifiers -->
                                                <StackPanel Orientation="Horizontal" Margin="10,5,0,0">
                                                    <TextBlock Text="Modifier Keys:" Width="100" VerticalAlignment="Center" />
                                                    <ItemsControl ItemsSource="{Binding Modifiers}" DataContext="{Binding}" DockPanel.Dock="Left">
                                                        <ItemsControl.ItemTemplate>
                                                            <DataTemplate>
                                                                <Button x:Name="Modifier" Padding="10 3" Margin="6,0,0,0" Width="100" 
                                                                        Background="White" BorderBrush="LightGray" HorizontalAlignment="Center" 
                                                                        ToolTip="LB: Set / RB: Unset" Content="{Binding Name.Value}">
                                                                    <bh:Interaction.Triggers>
                                                                        <bh:EventTrigger EventName="PreviewMouseLeftButtonDown">
                                                                            <bh:InvokeCommandAction Command="{Binding DataContext.SetModifierCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ItemsControl}}"
                                                CommandParameter="{Binding}" />
                                                                        </bh:EventTrigger>
                                                                        <bh:EventTrigger EventName="MouseRightButtonDown">
                                                                            <bh:InvokeCommandAction Command="{Binding DataContext.UnsetModifierCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ItemsControl}}"
                                                CommandParameter="{Binding}" />
                                                                        </bh:EventTrigger>
                                                                    </bh:Interaction.Triggers>
                                                                </Button>
                                                                <DataTemplate.Triggers>
                                                                    <Trigger Property="IsMouseOver" Value="True">
                                                                        <Setter TargetName="Modifier" Property="Content" Value="Set" />
                                                                    </Trigger>
                                                                </DataTemplate.Triggers>
                                                            </DataTemplate>
                                                        </ItemsControl.ItemTemplate>
                                                        <ItemsControl.ItemsPanel>
                                                            <ItemsPanelTemplate>
                                                                <StackPanel Orientation="Horizontal" />
                                                            </ItemsPanelTemplate>
                                                        </ItemsControl.ItemsPanel>
                                                    </ItemsControl>

                                                </StackPanel>
                                                <!-- Macro -->
                                                <ItemsControl ItemsSource="{Binding Macro}" Margin="10,5,0,0">
                                                    <ItemsControl.ItemTemplate>
                                                        <DataTemplate>
                                                            <StackPanel Orientation="Horizontal">
                                                                <ContentControl Content="{Binding}" />
                                                                <Button Command="{Binding DataContext.RemoveMacroCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ItemsControl}}"
                                                                        CommandParameter="{Binding}" VerticalAlignment="Top" Margin="15,5,0,0" VerticalContentAlignment="Center"
                                                                        Content="x" Padding="6,3" />
                                                            </StackPanel>
                                                        </DataTemplate>
                                                    </ItemsControl.ItemTemplate>
                                                </ItemsControl>
                                                <Button Content="Add Macro" Margin="10,5,0,10" MaxWidth="300" MinWidth="200" x:Name="AddMacroButton" HorizontalAlignment="Left">
                                                    <bh:Interaction.Triggers>
                                                        <bh:EventTrigger EventName="Click">
                                                            <bh:ChangePropertyAction TargetName="AddMacroContextMenu" PropertyName="PlacementTarget" Value="{Binding ElementName=AddMacroButton}" />
                                                            <!-- need to set DataContext -->
                                                            <bh:ChangePropertyAction TargetName="AddMacroContextMenu" PropertyName="IsOpen" Value="True" />
                                                        </bh:EventTrigger>
                                                    </bh:Interaction.Triggers>
                                                    <Button.ContextMenu>
                                                        <ContextMenu Placement="Bottom" x:Name="AddMacroContextMenu">
                                                            <MenuItem Header="Send Key" Command="{Binding AddKeyMacroCommand}" />
                                                            <MenuItem Header="Command" Command="{Binding AddCommandMacroCommand}" />
                                                            <MenuItem Header="Code" Command="{Binding AddCodeMacroCommand}" />
                                                        </ContextMenu>
                                                    </Button.ContextMenu>
                                                </Button>
                                            </StackPanel>
                                        </StackPanel>
                                    </ContentControl>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="BorderBrush" Value="#70c0e7" />
                                <Setter Property="Background" Value="#e5f3fb" />
                            </Trigger>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter Property="BorderBrush" Value="#26a0da" />
                                <Setter Property="Background" Value="#cbe8f6" />
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </ListView.ItemContainerStyle>
                
                <!-- KeyMap Column / Cell -->
                <ListView.View>
                    <GridView AllowsColumnReorder="True">
                        <GridViewColumn Header="On" Width="30" x:Name="IsActiveColumn">
                            <GridViewColumn.CellTemplate>
                                <DataTemplate>
                                    <CheckBox IsChecked="{Binding IsActive.Value}" VerticalContentAlignment="Center" HorizontalAlignment="Center" HorizontalContentAlignment="Stretch" />
                                </DataTemplate>
                            </GridViewColumn.CellTemplate>
                        </GridViewColumn>
                        <GridViewColumn Header="Key" Width="100" x:Name="KeyNameColumn">
                            <GridViewColumn.CellTemplate>
                                <DataTemplate>
                                    <Border x:Name="Cell">
                                        <TextBlock HorizontalAlignment="Center" Text="{Binding VirtualKey.Value.Name.Value, NotifyOnTargetUpdated=True}" />
                                    </Border>
                                    <DataTemplate.Triggers>
                                        <DataTrigger Binding="{Binding IsSimulated.Value}" Value="True">
                                            <Setter TargetName="Cell" Property="Background" Value="Yellow" />
                                        </DataTrigger>
                                    </DataTemplate.Triggers>
                                </DataTemplate>
                            </GridViewColumn.CellTemplate>
                        </GridViewColumn>
                        <GridViewColumn Header="Code" Width="50" x:Name="VirtualKeyColumn">
                            <GridViewColumn.CellTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding VirtualKey.Value.Key.Value}" HorizontalAlignment="Center" />
                                </DataTemplate>
                            </GridViewColumn.CellTemplate>
                        </GridViewColumn>
                        <GridViewColumn Header="Flags" Width="50" x:Name="FlagsColumn">
                            <GridViewColumn.CellTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding VirtualKey.Value.Flags.Value}" HorizontalAlignment="Center" />
                                </DataTemplate>
                            </GridViewColumn.CellTemplate>
                        </GridViewColumn>
                        <GridViewColumn Header="Modifiers" Width="120" x:Name="ModifiersColumn">
                            <GridViewColumn.CellTemplate>
                                <DataTemplate>
                                    <TextBlock HorizontalAlignment="Center" Text="{Binding ModifiersText.Value}"  />
                                </DataTemplate>
                            </GridViewColumn.CellTemplate>
                        </GridViewColumn>
                        <GridViewColumn Header="Macro" Width="200" x:Name="MacroColumn">
                            <GridViewColumn.CellTemplate>
                                <DataTemplate>
                                    <Grid x:Name="MacroCell" HorizontalAlignment="Stretch" Background="Transparent">
                                        <TextBlock Name="Content" Text="{Binding InlineText.Value}" Padding="6,3" />
                                        <Button Name="EditButton" Visibility="Hidden" Content="Edit" HorizontalAlignment="Left" Width="150" 
                                                Command="{Binding ToggleEditCommand}" CommandParameter="{Binding}">
                                        </Button>
                                        <Button Name="CloseButton" Visibility="Hidden" Content="Close" HorizontalAlignment="Left" Width="150">
                                            <bh:Interaction.Triggers>
                                                <bh:EventTrigger SourceName="CloseButton" EventName="Click">
                                                    <bh:InvokeCommandAction Command="{Binding ToggleEditCommand}" CommandParameter="{Binding}" />
                                                    <bh:InvokeCommandAction Command="{Binding DataContext.SelectedMapping.Value.SaveCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Window}}" />
                                                </bh:EventTrigger>
                                            </bh:Interaction.Triggers>
                                        </Button>
                                    </Grid>
                                    <DataTemplate.Triggers>
                                        <DataTrigger Binding="{Binding IsMouseOver, ElementName=MacroCell}" Value="True">
                                            <Setter TargetName="Content" Property="Visibility" Value="Hidden" />
                                            <Setter TargetName="EditButton" Property="Visibility" Value="Visible" />
                                            <Setter TargetName="CloseButton" Property="Visibility" Value="Hidden" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding IsEditing.Value}" Value="True">
                                            <Setter TargetName="Content" Property="Visibility" Value="Hidden" />
                                            <Setter TargetName="EditButton" Property="Visibility" Value="Hidden" />
                                            <Setter TargetName="CloseButton" Property="Visibility" Value="Visible" />
                                        </DataTrigger>
                                    </DataTemplate.Triggers>
                                </DataTemplate>
                            </GridViewColumn.CellTemplate>
                        </GridViewColumn>
                    </GridView>
                </ListView.View>
            </ListView>
        </DockPanel>

        <StatusBar Grid.Row="1" Grid.ColumnSpan="2">
            <StatusBarItem  />
            <StatusBarItem HorizontalAlignment="Right">LuaMacrosMapper Version : 0.1</StatusBarItem>
        </StatusBar>
        
        <!-- Grid Thumb -->
        <GridSplitter Width="5" HorizontalAlignment="Left" Grid.Column="1" Background="Transparent" />
        <Border BorderThickness="1,0" Width="3" BorderBrush="LightGray" Height="20" HorizontalAlignment="left" Margin="1,0,0,0" Grid.Column="1" Background="Transparent" IsHitTestVisible="False" />
    </Grid>
</Window>
